// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package de.philwo.kunoichi.datamodel;

import de.philwo.kunoichi.utils.Preconditions;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;

public class ActionGraph {

  private final HashMap<Action, ArrayList<Action>> edges;
  private final HashMap<Path, Action> actionsByOutput;

  public ActionGraph(int expectedNodeCount) {
    this.edges = new HashMap<>(expectedNodeCount);
    this.actionsByOutput = new HashMap<>();
  }

  public void addAction(Action action) {
    Preconditions.checkNotNull(action);

    if (edges.put(action, new ArrayList<>()) != null) {
      throw new IllegalArgumentException("Action " + action + " is already in the graph");
    }

    action
        .outputs()
        .forEach(
            output -> {
              if (actionsByOutput.put(output, action) != null) {
                throw new IllegalArgumentException(
                    "Output " + output + " is generated by multiple actions");
              }
            });
  }

  public void putEdge(Action action, Action dependency) {
    Preconditions.checkNotNull(action);
    Preconditions.checkNotNull(dependency);

    if (action.equals(dependency)) {
      throw new IllegalArgumentException("Cannot add self-edge to " + action);
    }

    ArrayList<Action> actions = edges.get(action);
    if (actions == null) {
      throw new IllegalArgumentException("Action " + action + " is not in the graph");
    }
    actions.add(dependency);
  }

  public ArrayList<Action> getDependencies(Action action) {
    return edges.get(Preconditions.checkNotNull(action));
  }

  public Action getGeneratingAction(Path output) {
    return actionsByOutput.get(Preconditions.checkNotNull(output));
  }
}
